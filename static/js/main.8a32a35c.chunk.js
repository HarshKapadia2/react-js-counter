(this["webpackJsonpreact-js-counter"]=this["webpackJsonpreact-js-counter"]||[]).push([[0],[,,,,,,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},,function(e,t,n){},function(e,t,n){"use strict";n.r(t);var i=n(1),a=n.n(i),c=n(4),r=n.n(c),l=(n(9),n(2)),u=(n(10),n(11),n(0)),s=function(e){var t=e.maxVal,n=e.initialVal,a=Object(i.useState)(n),c=Object(l.a)(a,2),r=c[0],s=c[1];Object(i.useEffect)((function(){s(n)}),[n]);return Object(u.jsxs)("div",{id:"counter",children:[Object(u.jsx)("button",{id:"decrement-btn",className:"btn",title:"Decrement",onClick:function(){s(r<=t?r-1:t)},children:"-"}),Object(u.jsx)("input",{type:"number",title:"Counter value",id:"counter-val",value:r,max:t,onChange:function(e){return s(Number(e.target.value))}}),Object(u.jsx)("button",{id:"increment-btn",className:"btn",title:"Increment",onClick:function(){s(r<t?r+1:t)},children:"+"})]})},b=(n(13),function(e){var t=e.receiveMaxVal,n=e.receiveInitialVal,a=Object(i.useRef)(),c=Object(i.useRef)();return Object(u.jsxs)("div",{id:"initializer",children:[Object(u.jsxs)("div",{className:"initializer-input-wrapper",children:[Object(u.jsx)("input",{id:"initial-input",ref:a,type:"number",placeholder:"Enter initial value"}),Object(u.jsx)("button",{className:"btn",onClick:function(){""===a.current.value?n(1):n(Number(a.current.value))},children:"Set Initial Value"})]}),Object(u.jsxs)("div",{className:"initializer-input-wrapper",children:[Object(u.jsx)("input",{id:"max-val-input",ref:c,type:"number",placeholder:"Enter maximum value"}),Object(u.jsx)("button",{className:"btn",onClick:function(){""===c.current.value?t(1e3):t(Number(c.current.value))},children:"Set Maximum Value"})]})]})});var j=function(){var e=Object(i.useState)(1e3),t=Object(l.a)(e,2),n=t[0],a=t[1],c=Object(i.useState)(1),r=Object(l.a)(c,2),j=r[0],o=r[1];return Object(u.jsxs)("main",{children:[Object(u.jsx)("h1",{children:"Counter"}),Object(u.jsxs)("div",{children:["Functional requirements",Object(u.jsxs)("ul",{children:[Object(u.jsx)("li",{children:"The counter can be initialised with a certain value. If no value is present at initialisation then the counter will start at 1."}),Object(u.jsx)("li",{children:"The counter can be initialised with a max value. If no max value is present, then assume that the max value will be 1000. If a max value is present then the counter can be incremented to only that max value."}),Object(u.jsx)("li",{children:"The user can also type a value into the counter."})]})]}),Object(u.jsx)(b,{receiveMaxVal:function(e){a(e)},receiveInitialVal:function(e){o(e)}}),Object(u.jsx)(s,{maxVal:n,initialVal:j}),Object(u.jsxs)("footer",{children:["Made by"," ",Object(u.jsx)("a",{href:"https://harshkapadia.bio.link",rel:"noreferrer",target:"_blank",children:"Harsh Kapadia"})," ","|"," ",Object(u.jsx)("a",{href:"https://github.com/HarshKapadia2/react-js-counter",rel:"noreferrer",target:"_blank",children:"GitHub repo"})]})]})};r.a.render(Object(u.jsxs)(a.a.StrictMode,{children:[Object(u.jsx)("noscript",{children:"You need to enable JavaScript to run this app."}),Object(u.jsx)(j,{})]}),document.querySelector("body"))}],[[14,1,2]]]);